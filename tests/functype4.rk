
sub test(dummy: Int, f: {=> Int})
	print(f())

sub test(dummy: Int64, f: {})
	print("Int64")

sub need_Int(dummy: Int) Int
	return(dummy)

sub need_Int64(dummy: Int64) Int64
	return(dummy)

#=>3
var a = 1
test(a, => 1 + 2)
need_Int(a)

#=>Int64
var b = 1
test(b, => 1 + 2)
need_Int64(b)

# 関数選択のテストケース
# 
# 第一引数がIntかInt64によって、全く同じラムダ式が{=> Int}か{}に切り替わる
# 
# 注意
# 「1 + 2」自体は意味のない計算式である
# CIL翻訳時に戻り値のない足し算は作れないように制限していたが
# 当テストケースのように意味はないがエラーにはして欲しくないケースがあり得るため
# エラーにしない
# RkNativeFunction.CreateCall が引数無しでもコード生成を行う
