struct Tree
	var left: Tree?
	var value: Int
	var right: Tree?

sub Tree(left: Tree?, value: Int, right: Tree?) Tree
	var x = Tree()
	x.left  = left
	x.value = value
	x.right = right
	return(x)

sub make_tree(start: Int, end: Int) Tree?
	var pivot = ((end - start) / 2) + start
	if start > end
		return(null)
	else
		return(Tree(make_tree(start, pivot - 1), pivot, make_tree(pivot + 1, end)))

sub get_list(tree: Tree?) System.Collections.Generic.List(Int)
	if x: Tree = tree
		return(get_list(x.left) + [x.value] + get_list(x.right))
	else
		return([])

var tree = make_tree(0, 100)
var xs   = get_list(tree)

#=>50
#=>0
#=>1
#=>2
#=>98
#=>99
#=>100

if x: Tree = tree
	print(x.value)
print(xs[0])
print(xs[1])
print(xs[2])
print(xs[98])
print(xs[99])
print(xs[100])
