
sub version() String
	return("0.0.0")

sub +(xs: [@T], ys: [@T]) [@T]
	var zs = [@T]()
	zs.AddRange(xs)
	zs.AddRange(ys)
	return(zs)

sub foldl(xs: [@T], f: {@R, @T => @R}, acc: @R) @R
	switch xs
		[] => return(acc)
		[y, ys] => return(foldl(ys, f, f(acc, y)))

sub foldr(xs: [@T], f: {@T, @R => @R}, acc: @R) @R
	switch xs
		[] => return(acc)
		[y, ys] => return(f(y, foldr(ys, f, acc)))

sub map(xs: [@T], f: {@T => @R}) [@R]
	return(foldr(xs, => [f($1)] + $2, []))

sub each(xs: [@T], block: {@T})
	switch xs
		[] =>
		[y, ys] =>
			block(y)
			each(ys, block)

sub each(xs: [@T], block: {@T, Int})
	sub _each(xs: [@T], block: {@T, Int}, index: Int)
		switch xs
			[] =>
			[y, ys] =>
				block(y, index)
				_each(ys, block, index + 1)
	_each(xs, block, 0)

class List<@T, @R>
	sub car(@T) @R
	sub cdr<List<@X, @R>>(@T) @X
	sub isnull(@T) Bool

class LoopHead<@T, @R>
	sub car(@T) @R
	sub cdr<LoopBody<@X, @R>>(@T) @X
	sub isnull(@T) Bool

class LoopBody<@T, @R>
	sub car(@T) @R
	sub cdr(@T) @T
	sub isnull(@T) Bool

struct ListIndex<@T>
	var index: Int
	var list: System.Collections.Generic.List<@T>

sub ListIndex(index: Int, xs: System.Collections.Generic.List<@T>) ListIndex<@T>
	var e = ListIndex<@T>()
	e.index = index
	e.list = xs
	return(e)

sub car(xs: System.Collections.Generic.List<@T>) @T
	return(xs[0])

sub car(xs: ListIndex<@T>) @T
	return(xs.list[xs.index])

sub cdr(xs: System.Collections.Generic.List<@T>) ListIndex<@T>
	return(ListIndex(1, xs))

sub cdr(xs: ListIndex<@T>) ListIndex<@T>
	return(ListIndex(xs.index + 1, xs.list))

sub isnull(xs: System.Collections.Generic.List<@T>) Bool
	return(xs.Count() == 0)

sub isnull(xs: ListIndex<@T>) Bool
	return(xs.index >= xs.list.Count())
